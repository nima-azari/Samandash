{"version":3,"sources":["pages/center-map-when-click-marker.js","util/tileLayer.js","../node_modules/react-leaflet/esm/Popup.js","../node_modules/react-leaflet/esm/Marker.js"],"names":["center","points","lat","lng","title","MyMarkers","map","data","index","position","eventHandlers","click","e","location","target","getLatLng","flyToBounds","MapWrapper","useState","setMap","whenCreated","zoom","scrollWheelZoom","tileLayer","url","Popup","createOverlayComponent","props","context","instance","LeafletPopup","overlayContainer","element","setOpen","onClose","onOpen","useEffect","onPopupOpen","event","popup","update","onPopupClose","on","popupopen","popupclose","setLatLng","openOn","bindPopup","_context$overlayConta","off","unbindPopup","removeLayer","Marker","createLayerComponent","ctx","options","LeafletMarker","marker","prevProps","icon","setIcon","zIndexOffset","setZIndexOffset","opacity","setOpacity","dragging","draggable","enable","disable"],"mappings":"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","file":"static/js/center-map-when-click-marker-js.d7dc3074.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport tileLayer from '../util/tileLayer';\n\nconst center = [52.22977, 21.01178];\nconst zoom = 18;\n\nconst points = [\n  {\n    lat: 52.230020586193795,\n    lng: 21.01083755493164,\n    title: 'point 1'\n  },\n  {\n    lat: 52.22924516170657,\n    lng: 21.011320352554325,\n    title: 'point 2'\n  },\n  {\n    lat: 52.229511304688444,\n    lng: 21.01270973682404,\n    title: 'point 3'\n  },\n  {\n    lat: 52.23040500771883,\n    lng: 21.012146472930908,\n    title: 'point 4'\n  },\n];\n\nconst MyMarkers = ({ map, data }) => {\n\n  return data.map(({ lat, lng, title }, index) => (\n    <Marker\n      key={index}\n      position={{ lat, lng }}\n      eventHandlers={{\n        click(e) {\n          const location = e.target.getLatLng();\n          map.flyToBounds([location]);\n        }\n      }}\n    >\n      <Popup>{title}</Popup>\n    </Marker>\n  ));\n}\n\nconst MapWrapper = () => {\n  const [map, setMap] = useState(null)\n\n  return (\n    <MapContainer\n      whenCreated={setMap}\n      center={center}\n      zoom={zoom}\n      scrollWheelZoom={false}\n    >\n\n      <TileLayer {...tileLayer} />\n\n      <MyMarkers map={map} data={points} />\n\n    </MapContainer>\n  )\n}\n\nexport default MapWrapper;","import VectorTileLayer from 'react-leaflet-vector-tile-layer';\n\nconst tileLayer = {\n  //attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n  url: \"http://localhost:8080/data/v3/{z}/{x}/{y}.pbf\"\n}\n\nexport default tileLayer;\n\n\n","import { createOverlayComponent } from '@react-leaflet/core';\nimport { Popup as LeafletPopup } from 'leaflet';\nimport { useEffect } from 'react';\nexport const Popup = createOverlayComponent(function createPopup(props, context) {\n  return {\n    instance: new LeafletPopup(props, context.overlayContainer),\n    context\n  };\n}, function usePopupLifecycle(element, context, props, setOpen) {\n  const {\n    onClose,\n    onOpen,\n    position\n  } = props;\n  useEffect(function addPopup() {\n    const {\n      instance\n    } = element;\n\n    function onPopupOpen(event) {\n      if (event.popup === instance) {\n        instance.update();\n        setOpen(true);\n        onOpen == null ? void 0 : onOpen();\n      }\n    }\n\n    function onPopupClose(event) {\n      if (event.popup === instance) {\n        setOpen(false);\n        onClose == null ? void 0 : onClose();\n      }\n    }\n\n    context.map.on({\n      popupopen: onPopupOpen,\n      popupclose: onPopupClose\n    });\n\n    if (context.overlayContainer == null) {\n      // Attach to a Map\n      if (position != null) {\n        instance.setLatLng(position);\n      }\n\n      instance.openOn(context.map);\n    } else {\n      // Attach to container component\n      context.overlayContainer.bindPopup(instance);\n    }\n\n    return function removePopup() {\n      var _context$overlayConta;\n\n      context.map.off({\n        popupopen: onPopupOpen,\n        popupclose: onPopupClose\n      });\n      (_context$overlayConta = context.overlayContainer) == null ? void 0 : _context$overlayConta.unbindPopup();\n      context.map.removeLayer(instance);\n    };\n  }, [element, context, setOpen, onClose, onOpen, position]);\n});","import { createLayerComponent } from '@react-leaflet/core';\nimport { Marker as LeafletMarker } from 'leaflet';\nexport const Marker = createLayerComponent(function createMarker({\n  position,\n  ...options\n}, ctx) {\n  const instance = new LeafletMarker(position, options);\n  return {\n    instance,\n    context: { ...ctx,\n      overlayContainer: instance\n    }\n  };\n}, function updateMarker(marker, props, prevProps) {\n  if (props.position !== prevProps.position) {\n    marker.setLatLng(props.position);\n  }\n\n  if (props.icon != null && props.icon !== prevProps.icon) {\n    marker.setIcon(props.icon);\n  }\n\n  if (props.zIndexOffset != null && props.zIndexOffset !== prevProps.zIndexOffset) {\n    marker.setZIndexOffset(props.zIndexOffset);\n  }\n\n  if (props.opacity != null && props.opacity !== prevProps.opacity) {\n    marker.setOpacity(props.opacity);\n  }\n\n  if (marker.dragging != null && props.draggable !== prevProps.draggable) {\n    if (props.draggable === true) {\n      marker.dragging.enable();\n    } else {\n      marker.dragging.disable();\n    }\n  }\n});"],"sourceRoot":""}