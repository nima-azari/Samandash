{"version":3,"sources":["pages/svg-markers-width-legends.js","util/tileLayer.js","../node_modules/react-leaflet/esm/Popup.js","../node_modules/react-leaflet/esm/Marker.js"],"names":["center","colors","labels","points","lat","lng","title","Legend","map","useEffect","legend","L","control","position","rows","onAdd","div","DomUtil","create","color","index","push","innerHTML","join","addTo","customMarkerIcon","svgTemplate","DivIcon","className","html","iconSize","iconAnchor","popupAnchor","MyMarkers","data","item","icon","MapWrapper","useState","setMap","whenCreated","zoom","scrollWheelZoom","tileLayer","url","Popup","createOverlayComponent","props","context","instance","LeafletPopup","overlayContainer","element","setOpen","onClose","onOpen","onPopupOpen","event","popup","update","onPopupClose","on","popupopen","popupclose","setLatLng","openOn","bindPopup","_context$overlayConta","off","unbindPopup","removeLayer","Marker","createLayerComponent","ctx","options","LeafletMarker","marker","prevProps","setIcon","zIndexOffset","setZIndexOffset","opacity","setOpacity","dragging","draggable","enable","disable"],"mappings":"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","file":"static/js/svg-markers-width-legends-js.a19ae463.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport tileLayer from \"../util/tileLayer\";\n\nconst center = [52.242, 21.017532];\n\nconst colors = [\"fe4848\", \"fe6c58\", \"fe9068\", \"feb478\", \"fed686\"];\nconst labels = [\"2-12.5\", \"12.6-16.8\", \"16.9-20.9\", \"21-25.9\", \"26-plus\"];\n\nconst points = [\n  {\n    lat: 52.228956,\n    lng: 21.003799,\n    title: \"point 1\",\n  },\n  {\n    lat: 52.258071,\n    lng: 20.986805,\n    title: \"point 2\",\n  },\n  {\n    lat: 52.242728,\n    lng: 21.041565,\n    title: \"point 3\",\n  },\n  {\n    lat: 52.234213,\n    lng: 21.029034,\n    title: \"point 4\",\n  },\n  {\n    lat: 52.251661,\n    lng: 21.003456,\n    title: \"point 5\",\n  },\n];\n\nconst Legend = ({ map }) => {\n  useEffect(() => {\n    if (!map) return;\n\n    const legend = L.control({ position: \"bottomright\" });\n\n    const rows = [];\n    legend.onAdd = () => {\n      const div = L.DomUtil.create(\"div\", \"legend\");\n      colors.map((color, index) => {\n        return rows.push(`\n            <div class=\"row\">\n              <i style=\"background: #${color}\"></i>${labels[index]}\n            </div>\n          `);\n      });\n      div.innerHTML = rows.join(\"\");\n      return div;\n    };\n\n    legend.addTo(map);\n  }, [map]);\n\n  return null;\n};\n\nfunction customMarkerIcon(color) {\n  const svgTemplate = `\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" class=\"marker\">\n      <path fill-opacity=\".25\" d=\"M16 32s1.427-9.585 3.761-12.025c4.595-4.805 8.685-.99 8.685-.99s4.044 3.964-.526 8.743C25.514 30.245 16 32 16 32z\"/>\n      <path fill=\"#${color}\" stroke=\"#fff\" d=\"M15.938 32S6 17.938 6 11.938C6 .125 15.938 0 15.938 0S26 .125 26 11.875C26 18.062 15.938 32 15.938 32zM16 6a4 4 0 100 8 4 4 0 000-8z\"/>\n    </svg>`;\n\n  return new L.DivIcon({\n    className: \"test\",\n    html: svgTemplate,\n    iconSize: [40, 40],\n    iconAnchor: [12, 24],\n    popupAnchor: [7, -16],\n  });\n}\n\nconst MyMarkers = ({ data }) => {\n  return data.map((item, index) => (\n    <Marker\n      key={index}\n      icon={customMarkerIcon(colors[index])}\n      position={{ lat: item.lat, lng: item.lng }}\n    >\n      <Popup>{item.title}</Popup>\n    </Marker>\n  ));\n};\n\nconst MapWrapper = () => {\n  const [map, setMap] = useState(null);\n  return (\n    <MapContainer\n      whenCreated={setMap}\n      center={center}\n      zoom={13}\n      scrollWheelZoom={false}\n    >\n      <TileLayer {...tileLayer} />\n\n      <MyMarkers data={points} />\n\n      <Legend map={map} />\n    </MapContainer>\n  );\n};\n\nexport default MapWrapper;\n","import VectorTileLayer from 'react-leaflet-vector-tile-layer';\n\nconst tileLayer = {\n  //attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n  url: \"http://localhost:8080/data/v3/{z}/{x}/{y}.pbf\"\n}\n\nexport default tileLayer;\n\n\n","import { createOverlayComponent } from '@react-leaflet/core';\nimport { Popup as LeafletPopup } from 'leaflet';\nimport { useEffect } from 'react';\nexport const Popup = createOverlayComponent(function createPopup(props, context) {\n  return {\n    instance: new LeafletPopup(props, context.overlayContainer),\n    context\n  };\n}, function usePopupLifecycle(element, context, props, setOpen) {\n  const {\n    onClose,\n    onOpen,\n    position\n  } = props;\n  useEffect(function addPopup() {\n    const {\n      instance\n    } = element;\n\n    function onPopupOpen(event) {\n      if (event.popup === instance) {\n        instance.update();\n        setOpen(true);\n        onOpen == null ? void 0 : onOpen();\n      }\n    }\n\n    function onPopupClose(event) {\n      if (event.popup === instance) {\n        setOpen(false);\n        onClose == null ? void 0 : onClose();\n      }\n    }\n\n    context.map.on({\n      popupopen: onPopupOpen,\n      popupclose: onPopupClose\n    });\n\n    if (context.overlayContainer == null) {\n      // Attach to a Map\n      if (position != null) {\n        instance.setLatLng(position);\n      }\n\n      instance.openOn(context.map);\n    } else {\n      // Attach to container component\n      context.overlayContainer.bindPopup(instance);\n    }\n\n    return function removePopup() {\n      var _context$overlayConta;\n\n      context.map.off({\n        popupopen: onPopupOpen,\n        popupclose: onPopupClose\n      });\n      (_context$overlayConta = context.overlayContainer) == null ? void 0 : _context$overlayConta.unbindPopup();\n      context.map.removeLayer(instance);\n    };\n  }, [element, context, setOpen, onClose, onOpen, position]);\n});","import { createLayerComponent } from '@react-leaflet/core';\nimport { Marker as LeafletMarker } from 'leaflet';\nexport const Marker = createLayerComponent(function createMarker({\n  position,\n  ...options\n}, ctx) {\n  const instance = new LeafletMarker(position, options);\n  return {\n    instance,\n    context: { ...ctx,\n      overlayContainer: instance\n    }\n  };\n}, function updateMarker(marker, props, prevProps) {\n  if (props.position !== prevProps.position) {\n    marker.setLatLng(props.position);\n  }\n\n  if (props.icon != null && props.icon !== prevProps.icon) {\n    marker.setIcon(props.icon);\n  }\n\n  if (props.zIndexOffset != null && props.zIndexOffset !== prevProps.zIndexOffset) {\n    marker.setZIndexOffset(props.zIndexOffset);\n  }\n\n  if (props.opacity != null && props.opacity !== prevProps.opacity) {\n    marker.setOpacity(props.opacity);\n  }\n\n  if (marker.dragging != null && props.draggable !== prevProps.draggable) {\n    if (props.draggable === true) {\n      marker.dragging.enable();\n    } else {\n      marker.dragging.disable();\n    }\n  }\n});"],"sourceRoot":""}