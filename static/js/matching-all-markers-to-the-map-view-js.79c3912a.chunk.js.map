{"version":3,"sources":["../node_modules/react-leaflet/esm/hooks.js","../node_modules/react-leaflet/esm/FeatureGroup.js","pages/matching-all-markers-to-the-map-view.js","util/tileLayer.js","../node_modules/react-leaflet/esm/Popup.js","../node_modules/react-leaflet/esm/Marker.js"],"names":["useMap","useLeafletContext","map","useMapEvent","type","handler","useEffect","on","off","FeatureGroup","createPathComponent","ctx","children","options","instance","LeafletFeatureGroup","context","layerContainer","overlayContainer","center","points","lat","lng","title","ControllingGroup","layeradd","bounds","L","LatLngBounds","eachLayer","layer","extend","getBounds","isValid","fitBounds","MapWrapper","className","zoom","scrollWheelZoom","tileLayer","index","position","url","Popup","createOverlayComponent","props","LeafletPopup","element","setOpen","onClose","onOpen","onPopupOpen","event","popup","update","onPopupClose","popupopen","popupclose","setLatLng","openOn","bindPopup","_context$overlayConta","unbindPopup","removeLayer","Marker","createLayerComponent","LeafletMarker","marker","prevProps","icon","setIcon","zIndexOffset","setZIndexOffset","opacity","setOpacity","dragging","draggable","enable","disable"],"mappings":"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","file":"static/js/matching-all-markers-to-the-map-view-js.79c3912a.chunk.js","sourcesContent":["import { useLeafletContext } from '@react-leaflet/core';\nimport { useEffect } from 'react';\nexport function useMap() {\n  return useLeafletContext().map;\n}\nexport function useMapEvent(type, handler) {\n  const map = useMap();\n  useEffect(function addMapEventHandler() {\n    // @ts-ignore event type\n    map.on(type, handler);\n    return function removeMapEventHandler() {\n      // @ts-ignore event type\n      map.off(type, handler);\n    };\n  }, [map, type, handler]);\n  return map;\n}\nexport function useMapEvents(handlers) {\n  const map = useMap();\n  useEffect(function addMapEventHandlers() {\n    map.on(handlers);\n    return function removeMapEventHandlers() {\n      map.off(handlers);\n    };\n  }, [map, handlers]);\n  return map;\n}","import { createPathComponent } from '@react-leaflet/core';\nimport { FeatureGroup as LeafletFeatureGroup } from 'leaflet';\nexport const FeatureGroup = createPathComponent(function createFeatureGroup({\n  children: _c,\n  ...options\n}, ctx) {\n  const instance = new LeafletFeatureGroup([], options);\n  const context = { ...ctx,\n    layerContainer: instance,\n    overlayContainer: instance\n  };\n  return {\n    instance,\n    context\n  };\n});","import { MapContainer, useMapEvent, FeatureGroup, TileLayer, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet';\nimport tileLayer from '../util/tileLayer';\n\nconst center = [52.22977, 21.01178];\n\nconst points = [\n  {\n    lat: 52.230020586193795,\n    lng: 21.01083755493164,\n    title: 'point 1'\n  },\n  {\n    lat: 52.22924516170657,\n    lng: 21.011320352554325,\n    title: 'point 2'\n  },\n  {\n    lat: 52.229511304688444,\n    lng: 21.01270973682404,\n    title: 'point 3'\n  },\n  {\n    lat: 52.23040500771883,\n    lng: 21.012146472930908,\n    title: 'point 4'\n  },\n];\n\nconst ControllingGroup = () => {\n  const map = useMapEvent({\n    layeradd() {\n      let bounds = new L.LatLngBounds();\n      map.eachLayer(function (layer) {\n        if (layer instanceof L.FeatureGroup) {\n          bounds.extend(layer.getBounds());\n        }\n      });\n\n      if (bounds.isValid()) {\n        map.fitBounds(bounds);\n      }\n    }\n  })\n\n  return null\n}\n\nconst MapWrapper = () => {\n  return (\n    <MapContainer className=\"markercluster-map\" center={center} zoom={20} scrollWheelZoom={false}>\n\n      <TileLayer {...tileLayer} />\n\n      <FeatureGroup>\n        {points.map(({ lat, lng, title }, index) => (\n          <Marker key={index} position={[lat, lng]}>\n            <Popup>{title}</Popup>\n          </Marker>\n        ))}\n      </FeatureGroup>\n\n      <ControllingGroup />\n    </MapContainer>\n  )\n}\n\nexport default MapWrapper;","import VectorTileLayer from 'react-leaflet-vector-tile-layer';\n\nconst tileLayer = {\n  //attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n  url: \"http://localhost:8080/data/v3/{z}/{x}/{y}.pbf\"\n}\n\nexport default tileLayer;\n\n\n","import { createOverlayComponent } from '@react-leaflet/core';\nimport { Popup as LeafletPopup } from 'leaflet';\nimport { useEffect } from 'react';\nexport const Popup = createOverlayComponent(function createPopup(props, context) {\n  return {\n    instance: new LeafletPopup(props, context.overlayContainer),\n    context\n  };\n}, function usePopupLifecycle(element, context, props, setOpen) {\n  const {\n    onClose,\n    onOpen,\n    position\n  } = props;\n  useEffect(function addPopup() {\n    const {\n      instance\n    } = element;\n\n    function onPopupOpen(event) {\n      if (event.popup === instance) {\n        instance.update();\n        setOpen(true);\n        onOpen == null ? void 0 : onOpen();\n      }\n    }\n\n    function onPopupClose(event) {\n      if (event.popup === instance) {\n        setOpen(false);\n        onClose == null ? void 0 : onClose();\n      }\n    }\n\n    context.map.on({\n      popupopen: onPopupOpen,\n      popupclose: onPopupClose\n    });\n\n    if (context.overlayContainer == null) {\n      // Attach to a Map\n      if (position != null) {\n        instance.setLatLng(position);\n      }\n\n      instance.openOn(context.map);\n    } else {\n      // Attach to container component\n      context.overlayContainer.bindPopup(instance);\n    }\n\n    return function removePopup() {\n      var _context$overlayConta;\n\n      context.map.off({\n        popupopen: onPopupOpen,\n        popupclose: onPopupClose\n      });\n      (_context$overlayConta = context.overlayContainer) == null ? void 0 : _context$overlayConta.unbindPopup();\n      context.map.removeLayer(instance);\n    };\n  }, [element, context, setOpen, onClose, onOpen, position]);\n});","import { createLayerComponent } from '@react-leaflet/core';\nimport { Marker as LeafletMarker } from 'leaflet';\nexport const Marker = createLayerComponent(function createMarker({\n  position,\n  ...options\n}, ctx) {\n  const instance = new LeafletMarker(position, options);\n  return {\n    instance,\n    context: { ...ctx,\n      overlayContainer: instance\n    }\n  };\n}, function updateMarker(marker, props, prevProps) {\n  if (props.position !== prevProps.position) {\n    marker.setLatLng(props.position);\n  }\n\n  if (props.icon != null && props.icon !== prevProps.icon) {\n    marker.setIcon(props.icon);\n  }\n\n  if (props.zIndexOffset != null && props.zIndexOffset !== prevProps.zIndexOffset) {\n    marker.setZIndexOffset(props.zIndexOffset);\n  }\n\n  if (props.opacity != null && props.opacity !== prevProps.opacity) {\n    marker.setOpacity(props.opacity);\n  }\n\n  if (marker.dragging != null && props.draggable !== prevProps.draggable) {\n    if (props.draggable === true) {\n      marker.dragging.enable();\n    } else {\n      marker.dragging.disable();\n    }\n  }\n});"],"sourceRoot":""}