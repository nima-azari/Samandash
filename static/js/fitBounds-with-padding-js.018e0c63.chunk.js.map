{"version":3,"sources":["../node_modules/react-leaflet/esm/ZoomControl.js","pages/fitBounds-with-padding.js","util/tileLayer.js","../node_modules/react-leaflet/esm/Popup.js","../node_modules/react-leaflet/esm/Marker.js"],"names":["ZoomControl","createControlComponent","props","Control","Zoom","Wrapper","styled","div","Info","center","MapWrapper","infoRef","useRef","useState","map","setMap","useEffect","ref","current","offsetWidth","visibleMarkers","eachLayer","layer","L","Marker","push","featureGroup","getBounds","handleResize","window","addEventListener","_","removeEventListener","fitBounds","paddingTopLeft","whenCreated","zoom","zoomControl","scrollWheelZoom","position","tileLayer","url","Popup","createOverlayComponent","context","instance","LeafletPopup","overlayContainer","element","setOpen","onClose","onOpen","onPopupOpen","event","popup","update","onPopupClose","on","popupopen","popupclose","setLatLng","openOn","bindPopup","_context$overlayConta","off","unbindPopup","removeLayer","createLayerComponent","ctx","options","LeafletMarker","marker","prevProps","icon","setIcon","zIndexOffset","setZIndexOffset","opacity","setOpacity","dragging","draggable","enable","disable"],"mappings":"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","file":"static/js/fitBounds-with-padding-js.018e0c63.chunk.js","sourcesContent":["import { createControlComponent } from '@react-leaflet/core';\nimport { Control } from 'leaflet';\nexport const ZoomControl = createControlComponent(function createZoomControl(props) {\n  return new Control.Zoom(props);\n});","import { useRef, useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, ZoomControl, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet';\nimport styled from 'styled-components';\nimport tileLayer from '../util/tileLayer';\n\nconst Wrapper = styled.div`\n  position: relative;\n`;\n\nconst Info = styled.div`\n  position: absolute;\n  z-index: 999;\n  border: 2px solid #0084ff;\n  top: 15px;\n  bottom: 15px;\n  left: 15px;\n  width: 30%;\n  background: #fff;\n  padding: 20px;\n  border-radius: 5px;\n  box-shadow: 0 0 10px 10px rgb(0 140 255 / 20%);\n  overflow: hidden;\n`;\n\nconst center = [52.22977, 21.01178];\n\nconst infoText = \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Obcaecati a deserunt distinctio vitae! Dolores officiis animi ab ut officia consequuntur fuga, possimus et eligendi, facilis libero nulla repellat modi magnam!\";\n\nconst MapWrapper = () => {\n  const infoRef = useRef(0);\n  const [map, setMap] = useState(null)\n\n  useEffect(() => {\n    if (!map) return;\n\n    const ref = infoRef.current.offsetWidth;\n\n    const visibleMarkers = [];\n    map.eachLayer((layer) => {\n      if (layer instanceof L.Marker) {\n        visibleMarkers.push(layer);\n      }\n    })\n\n    const featureGroup = L.featureGroup(visibleMarkers).getBounds()\n\n    function handleResize() {\n      map.fitBounds(featureGroup, {\n        paddingTopLeft: [ref + 10, 10]\n      })\n    }\n\n    handleResize();\n\n    window.addEventListener('resize', handleResize)\n\n    return _ => {\n      window.removeEventListener('resize', handleResize)\n    }\n\n  }, [map])\n\n  return (\n    <Wrapper>\n      <Info ref={infoRef}>\n        {infoText}\n      </Info>\n      <MapContainer\n        whenCreated={setMap}\n        center={center} zoom={18}\n        zoomControl={false}\n        scrollWheelZoom={false}\n      >\n\n        <ZoomControl position={'topright'} />\n\n        <TileLayer {...tileLayer} />\n\n        <Marker position={center}>\n          <Popup>Center Warsaw</Popup>\n        </Marker>\n\n      </MapContainer>\n    </Wrapper>\n  )\n}\n\nexport default MapWrapper;","import VectorTileLayer from 'react-leaflet-vector-tile-layer';\n\nconst tileLayer = {\n  //attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n  url: \"http://localhost:8080/data/v3/{z}/{x}/{y}.pbf\"\n}\n\nexport default tileLayer;\n\n\n","import { createOverlayComponent } from '@react-leaflet/core';\nimport { Popup as LeafletPopup } from 'leaflet';\nimport { useEffect } from 'react';\nexport const Popup = createOverlayComponent(function createPopup(props, context) {\n  return {\n    instance: new LeafletPopup(props, context.overlayContainer),\n    context\n  };\n}, function usePopupLifecycle(element, context, props, setOpen) {\n  const {\n    onClose,\n    onOpen,\n    position\n  } = props;\n  useEffect(function addPopup() {\n    const {\n      instance\n    } = element;\n\n    function onPopupOpen(event) {\n      if (event.popup === instance) {\n        instance.update();\n        setOpen(true);\n        onOpen == null ? void 0 : onOpen();\n      }\n    }\n\n    function onPopupClose(event) {\n      if (event.popup === instance) {\n        setOpen(false);\n        onClose == null ? void 0 : onClose();\n      }\n    }\n\n    context.map.on({\n      popupopen: onPopupOpen,\n      popupclose: onPopupClose\n    });\n\n    if (context.overlayContainer == null) {\n      // Attach to a Map\n      if (position != null) {\n        instance.setLatLng(position);\n      }\n\n      instance.openOn(context.map);\n    } else {\n      // Attach to container component\n      context.overlayContainer.bindPopup(instance);\n    }\n\n    return function removePopup() {\n      var _context$overlayConta;\n\n      context.map.off({\n        popupopen: onPopupOpen,\n        popupclose: onPopupClose\n      });\n      (_context$overlayConta = context.overlayContainer) == null ? void 0 : _context$overlayConta.unbindPopup();\n      context.map.removeLayer(instance);\n    };\n  }, [element, context, setOpen, onClose, onOpen, position]);\n});","import { createLayerComponent } from '@react-leaflet/core';\nimport { Marker as LeafletMarker } from 'leaflet';\nexport const Marker = createLayerComponent(function createMarker({\n  position,\n  ...options\n}, ctx) {\n  const instance = new LeafletMarker(position, options);\n  return {\n    instance,\n    context: { ...ctx,\n      overlayContainer: instance\n    }\n  };\n}, function updateMarker(marker, props, prevProps) {\n  if (props.position !== prevProps.position) {\n    marker.setLatLng(props.position);\n  }\n\n  if (props.icon != null && props.icon !== prevProps.icon) {\n    marker.setIcon(props.icon);\n  }\n\n  if (props.zIndexOffset != null && props.zIndexOffset !== prevProps.zIndexOffset) {\n    marker.setZIndexOffset(props.zIndexOffset);\n  }\n\n  if (props.opacity != null && props.opacity !== prevProps.opacity) {\n    marker.setOpacity(props.opacity);\n  }\n\n  if (marker.dragging != null && props.draggable !== prevProps.draggable) {\n    if (props.draggable === true) {\n      marker.dragging.enable();\n    } else {\n      marker.dragging.disable();\n    }\n  }\n});"],"sourceRoot":""}