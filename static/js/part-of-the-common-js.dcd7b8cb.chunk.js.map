{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/react-leaflet/esm/GeoJSON.js","pages/part-of-the-common.js","util/tileLayer.js"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","GeoJSON","createPathComponent","ctx","data","options","instance","LeafletGeoJSON","context","overlayContainer","layer","props","prevProps","style","resetStyle","setStyle","center","centers","lat","lng","steps","units","intersectionColor","color","weight","opacity","fillColor","fillOpacity","Intersection","map","useMap","useState","polygons","setPolygons","useEffect","polygon","circle","pol","length","intersect","MapWrapper","zoom","tileLayer","url"],"mappings":"iLAIe,SAASA,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgBJ,IAAQ,OAAAS,EAAA,GAA2BT,IGLvE,WACb,MAAM,IAAIU,UAAU,wIHIwE,K,mHIHjFC,EAAUC,aAAoB,WAGxCC,GAAK,IAFNC,EAEM,EAFNA,KACGC,EACG,iBACAC,EAAW,IAAIC,UAAeH,EAAMC,GAC1C,MAAO,CACLC,WACAE,QAAS,2BAAKL,GAAP,IACLM,iBAAkBH,QAGrB,SAAuBI,EAAOC,EAAOC,GAClCD,EAAME,QAAUD,EAAUC,QACT,MAAfF,EAAME,MACRH,EAAMI,aAENJ,EAAMK,SAASJ,EAAME,Y,sICbrBG,EAAS,CAAC,SAAU,UAEpBC,EAAU,CACd,CAAEC,IAAK,kBAAmBC,IAAK,mBAC/B,CAAED,IAAK,kBAAmBC,IAAK,oBAC/B,CAAED,IAAK,iBAAkBC,IAAK,qBAG1Bd,EAAU,CACde,MAAO,GACPC,MAAO,SACPhB,QAAS,IAGLiB,EAAoB,CACxBC,MAAO,SACPC,OAAQ,EACRC,QAAS,EACTC,UAAW,SACXC,YAAa,IAKTC,EAAe,WACnB,IAAMC,EAAMC,cACZ,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAYA,OAVAC,qBAAU,WAERjB,EAAQY,KAAI,YAAmB,IAAhBX,EAAe,EAAfA,IAAKC,EAAU,EAAVA,IACZgB,EAAUC,iBAAO,CAACjB,EAAKD,GATpB,GASkCb,GAE3C,OAAO4B,GAAY,SAAAI,GAAG,4BAAQA,GAAR,CAAaF,YAGpC,CAACN,IAEGG,EAASM,OAAS,EAErB,qCACE,cAAC,IAAD,CAASlC,KAAM4B,EAAUT,MAAO,MAAOC,OAAQ,IAC/C,cAAC,IAAD,CAASpB,KAAMmC,YAAS,WAAT,cAAaP,IAAWnB,MAAOS,OAGhD,MAgBSkB,UAZI,WACjB,OACE,eAAC,IAAD,CAAcxB,OAAQA,EAAQyB,KAAM,GAApC,UAEE,cAAC,IAAD,eAAeC,MAEf,cAACd,EAAD,S,gCC5DN,MAOec,IALG,CAEhBC,IAAK","file":"static/js/part-of-the-common-js.dcd7b8cb.chunk.js","sourcesContent":["import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { createPathComponent } from '@react-leaflet/core';\nimport { GeoJSON as LeafletGeoJSON } from 'leaflet';\nexport const GeoJSON = createPathComponent(function createGeoJSON({\n  data,\n  ...options\n}, ctx) {\n  const instance = new LeafletGeoJSON(data, options);\n  return {\n    instance,\n    context: { ...ctx,\n      overlayContainer: instance\n    }\n  };\n}, function updateGeoJSON(layer, props, prevProps) {\n  if (props.style !== prevProps.style) {\n    if (props.style == null) {\n      layer.resetStyle();\n    } else {\n      layer.setStyle(props.style);\n    }\n  }\n});","import { useState, useEffect } from 'react';\nimport { useMap, MapContainer, TileLayer, GeoJSON } from 'react-leaflet';\nimport { circle, intersect } from '@turf/turf';\nimport tileLayer from '../util/tileLayer';\n\nconst center = [52.22977, 21.01178];\n\nconst centers = [\n  { lat: 52.22990558765487, lng: 21.01168513298035 },\n  { lat: 52.22962958994604, lng: 21.011593937873844 },\n  { lat: 52.2297445891999, lng: 21.012012362480167 }\n]\n\nconst options = {\n  steps: 64,\n  units: 'meters',\n  options: {}\n}\n\nconst intersectionColor = {\n  color: \"yellow\",\n  weight: 2,\n  opacity: 1,\n  fillColor: \"yellow\",\n  fillOpacity: 0.7\n};\n\nconst radius = 30;\n\nconst Intersection = () => {\n  const map = useMap();\n  const [polygons, setPolygons] = useState([])\n\n  useEffect(() => {\n\n    centers.map(({ lat, lng }) => {\n      const polygon = circle([lng, lat], radius, options);\n\n      return setPolygons(pol => [...pol, polygon]);\n    })\n\n  }, [map])\n\n  return polygons.length > 0\n    ? (\n      <>\n        <GeoJSON data={polygons} color={'red'} weight={2} />\n        <GeoJSON data={intersect(...polygons)} style={intersectionColor} />\n      </>\n    )\n    : null\n}\n\n\nconst MapWrapper = () => {\n  return (\n    <MapContainer center={center} zoom={18}>\n\n      <TileLayer {...tileLayer} />\n\n      <Intersection />\n\n    </MapContainer>\n  )\n}\n\nexport default MapWrapper;","import VectorTileLayer from 'react-leaflet-vector-tile-layer';\n\nconst tileLayer = {\n  //attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n  url: \"http://localhost:8080/data/v3/{z}/{x}/{y}.pbf\"\n}\n\nexport default tileLayer;\n\n\n"],"sourceRoot":""}