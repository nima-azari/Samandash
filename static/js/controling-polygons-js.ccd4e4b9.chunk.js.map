{"version":3,"sources":["../node_modules/react-leaflet/esm/hooks.js","../node_modules/react-leaflet/esm/LayersControl.js","../node_modules/react-leaflet/esm/FeatureGroup.js","../node_modules/react-leaflet/esm/Polygon.js","pages/controling-polygons.js","util/tileLayer.js"],"names":["useMap","useLeafletContext","map","useMapEvent","type","handler","useEffect","on","off","useLayersControlElement","createElementHook","ctx","children","options","instance","Control","Layers","undefined","context","layersControl","control","props","prevProps","collapsed","collapse","expand","useLayersControl","createControlHook","LayersControl","createContainerComponent","createControlledLayer","addLayerToControl","parentContext","propsRef","useRef","useState","layer","setLayer","addLayer","useCallback","layerToAdd","current","checked","name","removeLayer","layerToRemove","useMemo","layerContainer","React","createElement","LeafletProvider","value","BaseLayer","addBaseLayer","Overlay","addOverlay","FeatureGroup","createPathComponent","LeafletFeatureGroup","overlayContainer","Polygon","positions","LeafletPolygon","setLatLngs","center","River","Place","ControllingGroup","layeradd","bounds","L","LatLngBounds","eachLayer","extend","getBounds","isValid","flyToBounds","riverColor","color","placeColor","MapWrapper","MapContainer","zoom","scrollWheelZoom","TileLayer","tileLayer","position","pathOptions","url"],"mappings":"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","file":"static/js/controling-polygons-js.ccd4e4b9.chunk.js","sourcesContent":["import { useLeafletContext } from '@react-leaflet/core';\nimport { useEffect } from 'react';\nexport function useMap() {\n  return useLeafletContext().map;\n}\nexport function useMapEvent(type, handler) {\n  const map = useMap();\n  useEffect(function addMapEventHandler() {\n    // @ts-ignore event type\n    map.on(type, handler);\n    return function removeMapEventHandler() {\n      // @ts-ignore event type\n      map.off(type, handler);\n    };\n  }, [map, type, handler]);\n  return map;\n}\nexport function useMapEvents(handlers) {\n  const map = useMap();\n  useEffect(function addMapEventHandlers() {\n    map.on(handlers);\n    return function removeMapEventHandlers() {\n      map.off(handlers);\n    };\n  }, [map, handlers]);\n  return map;\n}","import { LeafletProvider, createContainerComponent, createControlHook, createElementHook, useLeafletContext } from '@react-leaflet/core';\nimport { Control } from 'leaflet';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nexport const useLayersControlElement = createElementHook(function createLayersControl({\n  children: _c,\n  ...options\n}, ctx) {\n  const instance = new Control.Layers(undefined, undefined, options);\n  return {\n    instance,\n    context: { ...ctx,\n      layersControl: instance\n    }\n  };\n}, function updateLayersControl(control, props, prevProps) {\n  if (props.collapsed !== prevProps.collapsed) {\n    if (props.collapsed === true) {\n      control.collapse();\n    } else {\n      control.expand();\n    }\n  }\n});\nexport const useLayersControl = createControlHook(useLayersControlElement);\n// @ts-ignore\nexport const LayersControl = createContainerComponent(useLayersControl);\nexport function createControlledLayer(addLayerToControl) {\n  return function ControlledLayer(props) {\n    const parentContext = useLeafletContext();\n    const propsRef = useRef(props);\n    const [layer, setLayer] = useState(null);\n    const {\n      layersControl,\n      map\n    } = parentContext;\n    const addLayer = useCallback(layerToAdd => {\n      if (layersControl != null) {\n        if (propsRef.current.checked) {\n          map.addLayer(layerToAdd);\n        }\n\n        addLayerToControl(layersControl, layerToAdd, propsRef.current.name);\n        setLayer(layerToAdd);\n      }\n    }, [layersControl, map]);\n    const removeLayer = useCallback(layerToRemove => {\n      layersControl == null ? void 0 : layersControl.removeLayer(layerToRemove);\n      setLayer(null);\n    }, [layersControl]);\n    const context = useMemo(() => ({ ...parentContext,\n      layerContainer: {\n        addLayer,\n        removeLayer\n      }\n    }), [parentContext, addLayer, removeLayer]);\n    useEffect(() => {\n      if (layer !== null && propsRef.current !== props) {\n        if (props.checked === true && (propsRef.current.checked == null || propsRef.current.checked === false)) {\n          map.addLayer(layer);\n        } else if (propsRef.current.checked === true && (props.checked == null || props.checked === false)) {\n          map.removeLayer(layer);\n        }\n\n        propsRef.current = props;\n      }\n    });\n    return props.children ? /*#__PURE__*/React.createElement(LeafletProvider, {\n      value: context\n    }, props.children) : null;\n  };\n}\nLayersControl.BaseLayer = createControlledLayer(function addBaseLayer(layersControl, layer, name) {\n  layersControl.addBaseLayer(layer, name);\n});\nLayersControl.Overlay = createControlledLayer(function addOverlay(layersControl, layer, name) {\n  layersControl.addOverlay(layer, name);\n});","import { createPathComponent } from '@react-leaflet/core';\nimport { FeatureGroup as LeafletFeatureGroup } from 'leaflet';\nexport const FeatureGroup = createPathComponent(function createFeatureGroup({\n  children: _c,\n  ...options\n}, ctx) {\n  const instance = new LeafletFeatureGroup([], options);\n  const context = { ...ctx,\n    layerContainer: instance,\n    overlayContainer: instance\n  };\n  return {\n    instance,\n    context\n  };\n});","import { createPathComponent } from '@react-leaflet/core';\nimport { Polygon as LeafletPolygon } from 'leaflet';\nexport const Polygon = createPathComponent(function createPolygon({\n  positions,\n  ...options\n}, ctx) {\n  const instance = new LeafletPolygon(positions, options);\n  return {\n    instance,\n    context: { ...ctx,\n      overlayContainer: instance\n    }\n  };\n}, function updatePolygon(layer, props, prevProps) {\n  if (props.positions !== prevProps.positions) {\n    layer.setLatLngs(props.positions);\n  }\n});","import {\n  MapContainer,\n  Polygon,\n  FeatureGroup,\n  TileLayer,\n  LayersControl,\n  useMapEvent,\n} from \"react-leaflet\";\nimport L from \"leaflet\";\nimport tileLayer from \"../util/tileLayer\";\n\nconst center = [52.22977, 21.01178];\n\nconst River = [\n  [52.261433597272294, 21.01272583007813],\n  [52.259857564663236, 21.008262634277347],\n  [52.2485084763669, 21.019763946533207],\n  [52.24377883252849, 21.026287078857425],\n  [52.240835688576325, 21.032123565673828],\n  [52.235474460511696, 21.037960052490238],\n  [52.22800971166361, 21.04465484619141],\n  [52.2249603686772, 21.047916412353516],\n  [52.23600009974023, 21.042766571044925],\n  [52.24966453484508, 21.023368835449222],\n  [52.26132853017426, 21.01272583007813],\n];\n\nconst Place = [\n  [52.23295130556395, 20.998821258544925],\n  [52.230007443518716, 20.98474502563477],\n  [52.224750061441355, 20.98920822143555],\n  [52.22769427210073, 21.002597808837894],\n];\n\nconst ControllingGroup = () => {\n  const map = useMapEvent({\n    layeradd() {\n      let bounds = new L.LatLngBounds();\n      map.eachLayer(function (layer) {\n        if (layer instanceof L.FeatureGroup) {\n          bounds.extend(layer.getBounds());\n        }\n      });\n\n      if (bounds.isValid()) {\n        map.flyToBounds([bounds]);\n      }\n    },\n  });\n\n  return null;\n};\n\nconst riverColor = { color: \"red\" };\nconst placeColor = { color: \"blue\" };\n\nconst MapWrapper = () => {\n  return (\n    <MapContainer center={center} zoom={18} scrollWheelZoom={false}>\n      <TileLayer {...tileLayer} />\n\n      <LayersControl position=\"topright\" collapsed={false}>\n        <LayersControl.Overlay name=\"River\">\n          <FeatureGroup>\n            <Polygon pathOptions={riverColor} positions={River} />\n          </FeatureGroup>\n        </LayersControl.Overlay>\n\n        <LayersControl.Overlay name=\"Place\">\n          <FeatureGroup>\n            <Polygon pathOptions={placeColor} positions={Place} />\n          </FeatureGroup>\n        </LayersControl.Overlay>\n      </LayersControl>\n\n      <ControllingGroup />\n    </MapContainer>\n  );\n};\n\nexport default MapWrapper;\n","import VectorTileLayer from 'react-leaflet-vector-tile-layer';\n\nconst tileLayer = {\n  //attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n  url: \"http://localhost:8080/data/v3/{z}/{x}/{y}.pbf\"\n}\n\nexport default tileLayer;\n\n\n"],"sourceRoot":""}