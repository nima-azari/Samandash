{"version":3,"sources":["../node_modules/react-leaflet/esm/Polyline.js","pages/enlarge-a-polygon-box-by-5-percent.js","util/tileLayer.js"],"names":["Polyline","createPathComponent","ctx","positions","options","instance","LeafletPolyline","context","overlayContainer","layer","props","prevProps","setLatLngs","center","poland","MyCountry","map","useMap","useState","newCoordinates","setCoordinates","useEffect","poly","polygon","coordinates","transformScale","geometry","fill","color","MapWrapper","zoom","scrollWheelZoom","tileLayer","url"],"mappings":"8MAEaA,EAAWC,aAAoB,WAGzCC,GAAK,IAFNC,EAEM,EAFNA,UACGC,EACG,iBACAC,EAAW,IAAIC,WAAgBH,EAAWC,GAChD,MAAO,CACLC,WACAE,QAAS,2BAAKL,GAAP,IACLM,iBAAkBH,QAGrB,SAAwBI,EAAOC,EAAOC,GACnCD,EAAMP,YAAcQ,EAAUR,WAChCM,EAAMG,WAAWF,EAAMP,e,6HCVrBU,EAAS,CAAC,SAAU,UAEpBC,EAAS,CACb,CAAC,kBAAmB,oBACpB,CAAC,kBAAmB,oBACpB,CAAC,mBAAoB,oBACrB,CAAC,kBAAmB,oBACpB,CAAC,kBAAmB,oBACpB,CAAC,mBAAoB,oBACrB,CAAC,kBAAmB,iBACpB,CAAC,kBAAmB,oBACpB,CAAC,kBAAmB,oBACpB,CAAC,kBAAmB,qBAGhBC,EAAY,WAChB,IAAMC,EAAMC,cACZ,EAAyCC,mBAAS,MAAlD,mBAAOC,EAAP,KAAuBC,EAAvB,KAcA,OAZAC,qBAAU,WACR,GAAKL,EAAL,CAEA,IAAMM,EAAOC,kBAAQ,CAACT,IAGdU,EAFUC,yBAAeH,EAAM,MAELI,SAA1BF,YAERJ,EAAeI,MAEd,CAACR,IAEGG,EAEH,qCACE,cAAC,IAAD,CAAUhB,UAAWW,EAAQa,KAAM,MAAOC,MAAO,QACjD,cAAC,IAAD,CAAUzB,UAAWgB,EAAgBQ,KAAM,QAASC,MAAO,aAG7D,MAkBSC,UAdI,WACjB,OACE,eAAC,IAAD,CACEhB,OAAQA,EAAQiB,KAAM,EACtBC,iBAAiB,EAFnB,UAIE,cAAC,IAAD,eAAeC,MAEf,cAACjB,EAAD,S,gCCvDN,MAOeiB,IALG,CAEhBC,IAAK","file":"static/js/enlarge-a-polygon-box-by-5-percent-js.bc6b2c5d.chunk.js","sourcesContent":["import { createPathComponent } from '@react-leaflet/core';\nimport { Polyline as LeafletPolyline } from 'leaflet';\nexport const Polyline = createPathComponent(function createPolyline({\n  positions,\n  ...options\n}, ctx) {\n  const instance = new LeafletPolyline(positions, options);\n  return {\n    instance,\n    context: { ...ctx,\n      overlayContainer: instance\n    }\n  };\n}, function updatePolyline(layer, props, prevProps) {\n  if (props.positions !== prevProps.positions) {\n    layer.setLatLngs(props.positions);\n  }\n});","import { useEffect, useState } from 'react';\nimport { MapContainer, useMap, TileLayer, Polyline } from 'react-leaflet';\nimport { polygon, transformScale } from '@turf/turf';\nimport tileLayer from '../util/tileLayer';\n\nconst center = [52.22977, 19.01178];\n\nconst poland = [\n  [54.80068486732236, 18.292236328125004],\n  [53.89786522246521, 14.611816406250002],\n  [51.055207338584964, 15.281982421875002],\n  [49.57510247172322, 19.138183593750004],\n  [50.57626025689928, 23.642578125000004],\n  [52.214338608258224, 23.148193359375004],\n  [52.86912972768522, 23.741455078125],\n  [54.29729354239267, 22.928466796875004],\n  [54.29729354239267, 19.489746093750004],\n  [54.80068486732236, 18.292236328125004]\n];\n\nconst MyCountry = () => {\n  const map = useMap();\n  const [newCoordinates, setCoordinates] = useState(null)\n\n  useEffect(() => {\n    if (!map) return\n\n    const poly = polygon([poland]);\n    const scalePoly = transformScale(poly, 1.05)\n\n    const { coordinates } = scalePoly.geometry;\n\n    setCoordinates(coordinates);\n\n  }, [map])\n\n  return newCoordinates\n    ? (\n      <>\n        <Polyline positions={poland} fill={'red'} color={'red'} />\n        <Polyline positions={newCoordinates} fill={'white'} color={'white'} />\n      </>\n    )\n    : null\n\n}\n\nconst MapWrapper = () => {\n  return (\n    <MapContainer\n      center={center} zoom={6}\n      scrollWheelZoom={false}\n    >\n      <TileLayer {...tileLayer} />\n\n      <MyCountry />\n\n    </MapContainer>\n  )\n}\n\nexport default MapWrapper;","import VectorTileLayer from 'react-leaflet-vector-tile-layer';\n\nconst tileLayer = {\n  //attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n  url: \"http://localhost:8080/data/v3/{z}/{x}/{y}.pbf\"\n}\n\nexport default tileLayer;\n\n\n"],"sourceRoot":""}