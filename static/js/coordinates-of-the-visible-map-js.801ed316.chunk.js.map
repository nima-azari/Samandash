{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/react-leaflet/esm/Rectangle.js","pages/coordinates-of-the-visible-map.js","util/tileLayer.js"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","Rectangle","createPathComponent","ctx","bounds","options","instance","LeafletRectangle","context","overlayContainer","layer","props","prevProps","setBounds","center","SetRentacle","map","bound","index","color","Math","floor","random","toString","weight","fillOpacity","contentText","getBounds","_northEast","_southWest","Location","useState","useEffect","info","L","DomUtil","create","positon","Control","extend","position","onAdd","innerHTML","addControl","on","textContent","b","length","MapWrapper","setMap","MapContainer","whenCreated","zoom","scrollWheelZoom","TileLayer","tileLayer","url"],"mappings":"iLAIe,SAASA,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgBJ,IAAQ,OAAAS,EAAA,GAA2BT,IGLvE,WACb,MAAM,IAAIU,UAAU,wIHIwE,K,yHIHjFC,EAAYC,aAAoB,WAG1CC,GAAK,IAFNC,EAEM,EAFNA,OACGC,EACG,iBACAC,EAAW,IAAIC,YAAiBH,EAAQC,GAC9C,MAAO,CACLC,WACAE,QAAS,2BAAKL,GAAP,IACLM,iBAAkBH,QAGrB,SAAyBI,EAAOC,EAAOC,GACpCD,EAAMP,SAAWQ,EAAUR,QAC7BM,EAAMG,UAAUF,EAAMP,W,iCCVpBU,EAAS,CAAC,SAAU,UAM1B,IAAMC,EAAc,SAAC,GACnB,OADkC,EAAbX,OACPY,KAAI,SAACC,EAAOC,GAAR,OAChB,cAACjB,EAAD,CAEEG,OAAQa,EACRE,MARG,WAAIC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,KAAMA,WAS3DC,OAAQ,GACRC,YAAa,IAJRP,OAQX,SAASQ,EAAYC,GACnB,IAAQC,EAA2BD,EAA3BC,WAAYC,EAAeF,EAAfE,WACpB,MAAM,cAAN,OAAqBA,EAArB,wBAA+CD,GAGjD,IAAME,EAAW,SAAC,GAAa,IAAXd,EAAU,EAAVA,IAClB,EAA4Be,mBAAS,IAArC,mBAAO3B,EAAP,KAAeS,EAAf,KA4BA,OA1BAmB,qBAAU,WACR,GAAKhB,EAAL,CAEA,IAAMiB,EAAOC,IAAEC,QAAQC,OAAO,MAAO,UAE/BC,EAAUH,IAAEI,QAAQC,OAAO,CAC/BlC,QAAS,CACPmC,SAAU,cAGZC,MAAO,WAEL,OADAR,EAAKS,UAAYhB,EAAYV,EAAIW,aAC1BM,KAIXjB,EAAI2B,WAAW,IAAIN,GAEnBrB,EAAI4B,GAAG,mBAAmB,WACxB,IAAMxC,EAASY,EAAIW,YACnBM,EAAKY,YAAcnB,EAAYtB,GAC/BS,GAAU,SAAAiC,GAAC,4BAAQA,GAAR,CAAW1C,aAGvB,CAACY,KAES,OAANZ,QAAM,IAANA,OAAA,EAAAA,EAAQ2C,SAAU,EACrB,cAAC,EAAD,CAAa3C,OAAQA,IACrB,MAsBS4C,UAnBI,WACjB,MAAsBjB,mBAAS,MAA/B,mBAAOf,EAAP,KAAYiC,EAAZ,KAEA,OACE,eAACC,EAAA,EAAD,CACEC,YAAaF,EACbnC,OAAQA,EACRsC,KAAM,GACNC,iBAAiB,EAJnB,UAOE,cAACC,EAAA,EAAD,eAAeC,MAEf,cAAC,EAAD,CAAUvC,IAAKA,S,gCC1ErB,MAOeuC,IALG,CAEhBC,IAAK","file":"static/js/coordinates-of-the-visible-map-js.801ed316.chunk.js","sourcesContent":["import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { createPathComponent } from '@react-leaflet/core';\nimport { Rectangle as LeafletRectangle } from 'leaflet';\nexport const Rectangle = createPathComponent(function createRectangle({\n  bounds,\n  ...options\n}, ctx) {\n  const instance = new LeafletRectangle(bounds, options);\n  return {\n    instance,\n    context: { ...ctx,\n      overlayContainer: instance\n    }\n  };\n}, function updateRectangle(layer, props, prevProps) {\n  if (props.bounds !== prevProps.bounds) {\n    layer.setBounds(props.bounds);\n  }\n});","import { useEffect, useState } from 'react';\nimport { MapContainer, Rectangle, TileLayer } from 'react-leaflet';\nimport L from 'leaflet';\nimport tileLayer from '../util/tileLayer';\n\nconst center = [52.22977, 21.01178];\n\nfunction getRandomColor() {\n  return `#${Math.floor(Math.random() * 16777215).toString(16)}`.toString();\n}\n\nconst SetRentacle = ({ bounds }) => {\n  return bounds.map((bound, index) => (\n    <Rectangle\n      key={index}\n      bounds={bound}\n      color={getRandomColor()}\n      weight={10}\n      fillOpacity={0.1} />\n  ));\n}\n\nfunction contentText(getBounds) {\n  const { _northEast, _southWest } = getBounds;\n  return `SouthWest: ${_southWest}, NorthEast: ${_northEast}`;\n}\n\nconst Location = ({ map }) => {\n  const [bounds, setBounds] = useState([])\n\n  useEffect(() => {\n    if (!map) return;\n\n    const info = L.DomUtil.create('div', 'legend');\n\n    const positon = L.Control.extend({\n      options: {\n        position: 'bottomleft'\n      },\n\n      onAdd: function () {\n        info.innerHTML = contentText(map.getBounds());\n        return info;\n      }\n    })\n\n    map.addControl(new positon());\n\n    map.on('moveend zoomend', () => {\n      const bounds = map.getBounds();\n      info.textContent = contentText(bounds);\n      setBounds(b => [...b, bounds])\n    });\n\n  }, [map])\n\n  return bounds?.length <= 0\n    ? <SetRentacle bounds={bounds} />\n    : null;\n}\n\nconst MapWrapper = () => {\n  const [map, setMap] = useState(null)\n\n  return (\n    <MapContainer\n      whenCreated={setMap}\n      center={center}\n      zoom={18}\n      scrollWheelZoom={false}\n    >\n\n      <TileLayer {...tileLayer} />\n\n      <Location map={map} />\n\n    </MapContainer>\n  )\n}\n\nexport default MapWrapper;","import VectorTileLayer from 'react-leaflet-vector-tile-layer';\n\nconst tileLayer = {\n  //attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n  url: \"http://localhost:8080/data/v3/{z}/{x}/{y}.pbf\"\n}\n\nexport default tileLayer;\n\n\n"],"sourceRoot":""}