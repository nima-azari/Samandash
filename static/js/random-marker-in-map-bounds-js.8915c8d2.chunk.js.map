{"version":3,"sources":["pages/random-marker-in-map-bounds.js","util/tileLayer.js"],"names":["center","RandomMarkerInMapBounds","map","useEffect","legend","L","control","position","onAdd","div","DomUtil","create","DomEvent","disableClickPropagation","insertAdjacentHTML","addTo","customControl","Control","extend","options","title","className","this","_map","_initialLayout","container","_container","innerHTML","on","stopPropagation","stop","removeMarkers","randomMarker","addControl","fg","featureGroup","bounds","getBounds","southWest","getSouthWest","northEast","getNorthEast","lngSpan","lng","latSpan","lat","allPoints","i","points","Math","random","push","length","marker","icon","divIcon","iconSize","point","html","floor","toString","iconAnchor","popupAnchor","bindPopup","fitBounds","padding","clearLayers","MapWrapper","useState","setMap","whenCreated","zoom","scrollWheelZoom","tileLayer","url"],"mappings":"yMAKMA,EAAS,CAAC,SAAU,UAGpBC,EAA0B,SAAC,GAAa,IAAXC,EAAU,EAAVA,IA6HjC,OA5HAC,qBAAU,WACR,GAAKD,EAAL,CAEA,IAAME,EAASC,IAAEC,QAAQ,CAAEC,SAAU,eAErCH,EAAOI,MAAQ,WACb,IAAIC,EAAMJ,IAAEK,QAAQC,OAAO,MAAO,eAClCN,IAAEO,SAASC,wBAAwBJ,GAGnC,OADAA,EAAIK,mBAAmB,YADV,oDAENL,GAGTL,EAAOW,MAAMb,GAGb,IAIMc,EAAgBX,IAAEY,QAAQC,OAAO,CAErCC,QAAS,CACPZ,SAAU,UACVa,MAAO,gBACPC,UAAW,yBAIbb,MAAO,SAAUN,GAEf,OADAoB,KAAKC,KAAOrB,EACLoB,KAAKE,kBAGdA,eAAgB,WAEd,IAAMC,EAAYpB,IAAEK,QAAQC,OAC1B,MACA,eAAiBW,KAAKH,QAAQE,WAoBhC,OAlBAC,KAAKI,WAAaD,EAElBpB,IAAEO,SAASC,wBAAwBY,GAEnCA,EAAUL,MAAQE,KAAKH,QAAQC,MAC/BK,EAAUE,UA5BZ,wYAgCEtB,IAAEO,SAASgB,GACTH,EACA,oBACApB,IAAEO,SAASiB,iBAEVD,GAAGH,EAAW,QAASpB,IAAEO,SAASkB,MAClCF,GAAGH,EAAW,QAASM,GACvBH,GAAGH,EAAW,QAASO,GAEnBV,KAAKI,cAKhBxB,EAAI+B,WAAW,IAAIjB,GAInB,IAMMkB,EAAK7B,IAAE8B,eAAepB,MAAMb,GAgDlC8B,IA7CA,SAASA,IAYP,IAVA,IAAMI,EAASlC,EAAImC,YAEfC,EAAYF,EAAOG,eACnBC,EAAYJ,EAAOK,eACnBC,EAAUF,EAAUG,IAAML,EAAUK,IACpCC,EAAUJ,EAAUK,IAAMP,EAAUO,IAEpCC,EAAY,GAGPC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAIC,EAAS,CACXV,EAAUO,IAAMD,EAAUK,KAAKC,SAC/BZ,EAAUK,IAAMD,EAAUO,KAAKC,UAEjCJ,EAAUK,KAAKH,GAIjB,IAAK,IAAID,EAAI,EAAGA,EAAID,EAAUM,OAAQL,IACpC1C,IAAEgD,OAAOP,EAAUC,GAAI,CACrBO,KAAMjD,IAAEkD,QAAQ,CACdlC,UAAW,qBACXmC,SAAUnD,IAAEoD,MAAM,GAAI,IACtBC,KAAK,0PAAD,OAnCcT,KAAKU,MAAsB,SAAhBV,KAAKC,UAAqBU,SAAS,IAmC5D,sJACJC,WAAY,CAAC,GAAI,IACjBC,YAAa,CAAC,GAAI,QAGnBC,UATH,wCAS8CjB,EAAUC,GAAGa,aACxD7C,MAAMmB,GAIXhC,EAAI8D,UAAU9B,EAAGG,YAAa,CAAE4B,QAAS,CAAC,GAAI,MAIhD,SAASlC,IACPG,EAAGgC,iBAKJ,CAAChE,IAEG,MAoBMiE,UAjBI,WACjB,MAAsBC,mBAAS,MAA/B,mBAAOlE,EAAP,KAAYmE,EAAZ,KAEA,OACE,eAAC,IAAD,CACEC,YAAaD,EACbrE,OAAQA,EACRuE,KAAM,GACNC,iBAAiB,EAJnB,UAME,cAAC,IAAD,eAAeC,MAEf,cAACxE,EAAD,CAAyBC,IAAKA,S,gCCpJpC,MAOeuE,IALG,CAEhBC,IAAK","file":"static/js/random-marker-in-map-bounds-js.8915c8d2.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { MapContainer, TileLayer } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport tileLayer from \"../util/tileLayer\";\n\nconst center = [52.22977, 21.01178];\n\n// RandomMarkerInMapBounds\nconst RandomMarkerInMapBounds = ({ map }) => {\n  useEffect(() => {\n    if (!map) return;\n\n    const legend = L.control({ position: \"bottomleft\" });\n\n    legend.onAdd = function () {\n      let div = L.DomUtil.create(\"div\", \"description\");\n      L.DomEvent.disableClickPropagation(div);\n      const text = \"Dynamic generation of 30 markers in the map view\";\n      div.insertAdjacentHTML(\"beforeend\", text);\n      return div;\n    };\n\n    legend.addTo(map);\n\n    // add \"random\" button\n    const buttonTemplate =\n      '<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\"><path d=\"M24 22h-3.172l-5-5 5-5h3.172v5l7-7-7-7v5h-4c-0.53 0-1.039 0.211-1.414 0.586l-5.586 5.586-5.586-5.586c-0.375-0.375-0.884-0.586-1.414-0.586h-6v4h5.172l5 5-5 5h-5.172v4h6c0.53 0 1.039-0.211 1.414-0.586l5.586-5.586 5.586 5.586c0.375 0.375 0.884 0.586 1.414 0.586h4v5l7-7-7-7v5z\" /></svg>';\n\n    // create custom button\n    const customControl = L.Control.extend({\n      // button position\n      options: {\n        position: \"topleft\",\n        title: \"random marker\",\n        className: \"leaflet-random-marker\",\n      },\n\n      // method\n      onAdd: function (map) {\n        this._map = map;\n        return this._initialLayout();\n      },\n\n      _initialLayout: function () {\n        // create button\n        const container = L.DomUtil.create(\n          \"div\",\n          \"leaflet-bar \" + this.options.className\n        );\n        this._container = container;\n\n        L.DomEvent.disableClickPropagation(container);\n\n        container.title = this.options.title;\n        container.innerHTML = buttonTemplate;\n\n        // action when clik on button\n        // clear and add radnom marker\n        L.DomEvent.on(\n          container,\n          \"mousedown dblclic\",\n          L.DomEvent.stopPropagation\n        )\n          .on(container, \"click\", L.DomEvent.stop)\n          .on(container, \"click\", removeMarkers)\n          .on(container, \"click\", randomMarker);\n\n        return this._container;\n      },\n    });\n\n    // adding new button to map controll\n    map.addControl(new customControl());\n\n    // random color\n    // ------------------------------\n    const randomColor = () => Math.floor(Math.random() * 16777215).toString(16);\n\n    // create legend\n    // ------------------------------\n\n    // add feature group to map\n    const fg = L.featureGroup().addTo(map);\n\n    // create random marker\n    function randomMarker() {\n      // get bounds of map\n      const bounds = map.getBounds();\n\n      let southWest = bounds.getSouthWest();\n      let northEast = bounds.getNorthEast();\n      let lngSpan = northEast.lng - southWest.lng;\n      let latSpan = northEast.lat - southWest.lat;\n\n      let allPoints = [];\n\n      // generate random points and add to array 'allPoints'\n      for (let i = 0; i < 30; i++) {\n        let points = [\n          southWest.lat + latSpan * Math.random(),\n          southWest.lng + lngSpan * Math.random(),\n        ];\n        allPoints.push(points);\n      }\n\n      // add markers to feature group\n      for (let i = 0; i < allPoints.length; i++) {\n        L.marker(allPoints[i], {\n          icon: L.divIcon({\n            className: \"custom-icon-marker\",\n            iconSize: L.point(40, 40),\n            html: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" class=\"marker\"><path fill-opacity=\"0.25\" d=\"M16 32s1.427-9.585 3.761-12.025c4.595-4.805 8.685-.99 8.685-.99s4.044 3.964-.526 8.743C25.514 30.245 16 32 16 32z\"/><path stroke=\"#fff\" fill=\"#${randomColor()}\" d=\"M15.938 32S6 17.938 6 11.938C6 .125 15.938 0 15.938 0S26 .125 26 11.875C26 18.062 15.938 32 15.938 32zM16 6a4 4 0 100 8 4 4 0 000-8z\"/></svg>`,\n            iconAnchor: [12, 24],\n            popupAnchor: [9, -26],\n          }),\n        })\n          .bindPopup(`<b>Marker coordinates</b>:<br>${allPoints[i].toString()}`)\n          .addTo(fg);\n      }\n\n      // zoom to feature group and add padding\n      map.fitBounds(fg.getBounds(), { padding: [20, 20] });\n    }\n\n    //  remove markers from feature group\n    function removeMarkers() {\n      fg.clearLayers();\n    }\n\n    // initialize random marker\n    randomMarker();\n  }, [map]);\n\n  return null;\n};\n\nconst MapWrapper = () => {\n  const [map, setMap] = useState(null);\n\n  return (\n    <MapContainer\n      whenCreated={setMap}\n      center={center}\n      zoom={18}\n      scrollWheelZoom={false}\n    >\n      <TileLayer {...tileLayer} />\n\n      <RandomMarkerInMapBounds map={map} />\n    </MapContainer>\n  );\n};\n\nexport default MapWrapper;\n","import VectorTileLayer from 'react-leaflet-vector-tile-layer';\n\nconst tileLayer = {\n  //attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n  url: \"http://localhost:8080/data/v3/{z}/{x}/{y}.pbf\"\n}\n\nexport default tileLayer;\n\n\n"],"sourceRoot":""}