{"version":3,"sources":["pages/dragable-markers.js","util/tileLayer.js","../node_modules/react-leaflet/esm/Popup.js","../node_modules/react-leaflet/esm/Marker.js"],"names":["center","points","lat","lng","title","MapWrapper","useState","map","setMap","text","setText","useEffect","legend","L","control","position","onAdd","div","DomUtil","create","innerHTML","addTo","eventHandlers","useMemo","dragend","e","target","getLatLng","whenCreated","zoom","scrollWheelZoom","tileLayer","index","draggable","autoPan","url","Popup","createOverlayComponent","props","context","instance","LeafletPopup","overlayContainer","element","setOpen","onClose","onOpen","onPopupOpen","event","popup","update","onPopupClose","on","popupopen","popupclose","setLatLng","openOn","bindPopup","_context$overlayConta","off","unbindPopup","removeLayer","Marker","createLayerComponent","ctx","options","LeafletMarker","marker","prevProps","icon","setIcon","zIndexOffset","setZIndexOffset","opacity","setOpacity","dragging","enable","disable"],"mappings":"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","file":"static/js/dragable-markers-js.eec934b0.chunk.js","sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet';\nimport tileLayer from '../util/tileLayer';\n\nconst center = [52.22977, 21.01178];\n\nconst points = [\n  {\n    lat: 52.230020586193795,\n    lng: 21.01083755493164,\n    title: 'point 1'\n  },\n  {\n    lat: 52.22924516170657,\n    lng: 21.011320352554325,\n    title: 'point 2'\n  },\n  {\n    lat: 52.229511304688444,\n    lng: 21.01270973682404,\n    title: 'point 3'\n  },\n  {\n    lat: 52.23040500771883,\n    lng: 21.012146472930908,\n    title: 'point 4'\n  },\n];\n\nconst MapWrapper = () => {\n  const [map, setMap] = useState(null);\n  const [text, setText] = useState(null)\n\n  useEffect(() => {\n    if (!map) return;\n\n    const legend = L.control({ position: \"bottomleft\" });\n\n    legend.onAdd = () => {\n      const div = L.DomUtil.create(\"div\", \"legend\");\n      div.innerHTML = `click marker, move`;\n      setText(div);\n      return div;\n    };\n\n    legend.addTo(map);\n\n  }, [map]);\n\n  const eventHandlers = useMemo(() => ({\n    dragend(e) {\n      text.innerHTML = e.target.getLatLng();\n    },\n  }), [text])\n\n  return (\n    <MapContainer\n      whenCreated={setMap}\n      center={center}\n      zoom={18}\n      scrollWheelZoom={false}\n    >\n\n      <TileLayer {...tileLayer} />\n\n      {points.map(({ lat, lng, title }, index) => (\n        <Marker\n          eventHandlers={eventHandlers}\n          key={index}\n          draggable={true}\n          autoPan={true}\n          position={[lat, lng]}\n        >\n          <Popup>{title}</Popup>\n        </Marker>\n      ))}\n\n    </MapContainer>\n  )\n}\n\nexport default MapWrapper;","import VectorTileLayer from 'react-leaflet-vector-tile-layer';\n\nconst tileLayer = {\n  //attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n  url: \"http://localhost:8080/data/v3/{z}/{x}/{y}.pbf\"\n}\n\nexport default tileLayer;\n\n\n","import { createOverlayComponent } from '@react-leaflet/core';\nimport { Popup as LeafletPopup } from 'leaflet';\nimport { useEffect } from 'react';\nexport const Popup = createOverlayComponent(function createPopup(props, context) {\n  return {\n    instance: new LeafletPopup(props, context.overlayContainer),\n    context\n  };\n}, function usePopupLifecycle(element, context, props, setOpen) {\n  const {\n    onClose,\n    onOpen,\n    position\n  } = props;\n  useEffect(function addPopup() {\n    const {\n      instance\n    } = element;\n\n    function onPopupOpen(event) {\n      if (event.popup === instance) {\n        instance.update();\n        setOpen(true);\n        onOpen == null ? void 0 : onOpen();\n      }\n    }\n\n    function onPopupClose(event) {\n      if (event.popup === instance) {\n        setOpen(false);\n        onClose == null ? void 0 : onClose();\n      }\n    }\n\n    context.map.on({\n      popupopen: onPopupOpen,\n      popupclose: onPopupClose\n    });\n\n    if (context.overlayContainer == null) {\n      // Attach to a Map\n      if (position != null) {\n        instance.setLatLng(position);\n      }\n\n      instance.openOn(context.map);\n    } else {\n      // Attach to container component\n      context.overlayContainer.bindPopup(instance);\n    }\n\n    return function removePopup() {\n      var _context$overlayConta;\n\n      context.map.off({\n        popupopen: onPopupOpen,\n        popupclose: onPopupClose\n      });\n      (_context$overlayConta = context.overlayContainer) == null ? void 0 : _context$overlayConta.unbindPopup();\n      context.map.removeLayer(instance);\n    };\n  }, [element, context, setOpen, onClose, onOpen, position]);\n});","import { createLayerComponent } from '@react-leaflet/core';\nimport { Marker as LeafletMarker } from 'leaflet';\nexport const Marker = createLayerComponent(function createMarker({\n  position,\n  ...options\n}, ctx) {\n  const instance = new LeafletMarker(position, options);\n  return {\n    instance,\n    context: { ...ctx,\n      overlayContainer: instance\n    }\n  };\n}, function updateMarker(marker, props, prevProps) {\n  if (props.position !== prevProps.position) {\n    marker.setLatLng(props.position);\n  }\n\n  if (props.icon != null && props.icon !== prevProps.icon) {\n    marker.setIcon(props.icon);\n  }\n\n  if (props.zIndexOffset != null && props.zIndexOffset !== prevProps.zIndexOffset) {\n    marker.setZIndexOffset(props.zIndexOffset);\n  }\n\n  if (props.opacity != null && props.opacity !== prevProps.opacity) {\n    marker.setOpacity(props.opacity);\n  }\n\n  if (marker.dragging != null && props.draggable !== prevProps.draggable) {\n    if (props.draggable === true) {\n      marker.dragging.enable();\n    } else {\n      marker.dragging.disable();\n    }\n  }\n});"],"sourceRoot":""}