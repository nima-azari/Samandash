{"version":3,"sources":["../node_modules/react-leaflet/esm/hooks.js","../node_modules/react-leaflet/esm/Circle.js","pages/location.js","util/tileLayer.js","../node_modules/react-leaflet/esm/Popup.js","../node_modules/react-leaflet/esm/Marker.js"],"names":["useMap","useLeafletContext","map","useMapEvent","type","handler","useEffect","on","off","Circle","createPathComponent","ctx","center","options","children","instance","LeafletCircle","context","overlayContainer","updateCircle","Location","useState","position","setPosition","locate","setView","event","latlng","weight","color","fillColor","fillOpacity","radius","Marker","Popup","MapWrapper","MapContainer","zoom","scrollWheelZoom","TileLayer","tileLayer","url","createOverlayComponent","props","LeafletPopup","element","setOpen","onClose","onOpen","onPopupOpen","popup","update","onPopupClose","popupopen","popupclose","setLatLng","openOn","bindPopup","_context$overlayConta","unbindPopup","removeLayer","createLayerComponent","LeafletMarker","marker","prevProps","icon","setIcon","zIndexOffset","setZIndexOffset","opacity","setOpacity","dragging","draggable","enable","disable"],"mappings":"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","file":"static/js/location-js.4bb15fb1.chunk.js","sourcesContent":["import { useLeafletContext } from '@react-leaflet/core';\nimport { useEffect } from 'react';\nexport function useMap() {\n  return useLeafletContext().map;\n}\nexport function useMapEvent(type, handler) {\n  const map = useMap();\n  useEffect(function addMapEventHandler() {\n    // @ts-ignore event type\n    map.on(type, handler);\n    return function removeMapEventHandler() {\n      // @ts-ignore event type\n      map.off(type, handler);\n    };\n  }, [map, type, handler]);\n  return map;\n}\nexport function useMapEvents(handlers) {\n  const map = useMap();\n  useEffect(function addMapEventHandlers() {\n    map.on(handlers);\n    return function removeMapEventHandlers() {\n      map.off(handlers);\n    };\n  }, [map, handlers]);\n  return map;\n}","import { createPathComponent, updateCircle } from '@react-leaflet/core';\nimport { Circle as LeafletCircle } from 'leaflet';\nexport const Circle = createPathComponent(function createCircle({\n  center,\n  children: _c,\n  ...options\n}, ctx) {\n  const instance = new LeafletCircle(center, options);\n  return {\n    instance,\n    context: { ...ctx,\n      overlayContainer: instance\n    }\n  };\n}, updateCircle);","import { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, useMap, Marker, Popup, Circle } from 'react-leaflet';\nimport tileLayer from '../util/tileLayer';\n\nconst center = [52.22977, 21.01178];\n\nconst Location = () => {\n  const map = useMap();\n  const [position, setPosition] = useState(null)\n\n  useEffect(() => {\n    map.locate({\n      setView: true\n    })\n    map.on('locationfound', (event) => {\n      setPosition(event.latlng)\n    })\n  }, [map])\n\n\n  return position\n    ? (\n      <>\n        <Circle center={position} weight={2} color={'red'} fillColor={'red'} fillOpacity={0.1} radius={500}></Circle>\n        <Marker position={position}>\n          <Popup>You are here</Popup>\n        </Marker>\n      </>\n    )\n    : null\n}\n\nconst MapWrapper = () => {\n  return (\n    <MapContainer\n      center={center}\n      zoom={18}\n      scrollWheelZoom={false}\n    >\n\n      <TileLayer {...tileLayer} />\n\n      <Location />\n\n    </MapContainer>\n  )\n}\n\nexport default MapWrapper;","import VectorTileLayer from 'react-leaflet-vector-tile-layer';\n\nconst tileLayer = {\n  //attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n  url: \"http://localhost:8080/data/v3/{z}/{x}/{y}.pbf\"\n}\n\nexport default tileLayer;\n\n\n","import { createOverlayComponent } from '@react-leaflet/core';\nimport { Popup as LeafletPopup } from 'leaflet';\nimport { useEffect } from 'react';\nexport const Popup = createOverlayComponent(function createPopup(props, context) {\n  return {\n    instance: new LeafletPopup(props, context.overlayContainer),\n    context\n  };\n}, function usePopupLifecycle(element, context, props, setOpen) {\n  const {\n    onClose,\n    onOpen,\n    position\n  } = props;\n  useEffect(function addPopup() {\n    const {\n      instance\n    } = element;\n\n    function onPopupOpen(event) {\n      if (event.popup === instance) {\n        instance.update();\n        setOpen(true);\n        onOpen == null ? void 0 : onOpen();\n      }\n    }\n\n    function onPopupClose(event) {\n      if (event.popup === instance) {\n        setOpen(false);\n        onClose == null ? void 0 : onClose();\n      }\n    }\n\n    context.map.on({\n      popupopen: onPopupOpen,\n      popupclose: onPopupClose\n    });\n\n    if (context.overlayContainer == null) {\n      // Attach to a Map\n      if (position != null) {\n        instance.setLatLng(position);\n      }\n\n      instance.openOn(context.map);\n    } else {\n      // Attach to container component\n      context.overlayContainer.bindPopup(instance);\n    }\n\n    return function removePopup() {\n      var _context$overlayConta;\n\n      context.map.off({\n        popupopen: onPopupOpen,\n        popupclose: onPopupClose\n      });\n      (_context$overlayConta = context.overlayContainer) == null ? void 0 : _context$overlayConta.unbindPopup();\n      context.map.removeLayer(instance);\n    };\n  }, [element, context, setOpen, onClose, onOpen, position]);\n});","import { createLayerComponent } from '@react-leaflet/core';\nimport { Marker as LeafletMarker } from 'leaflet';\nexport const Marker = createLayerComponent(function createMarker({\n  position,\n  ...options\n}, ctx) {\n  const instance = new LeafletMarker(position, options);\n  return {\n    instance,\n    context: { ...ctx,\n      overlayContainer: instance\n    }\n  };\n}, function updateMarker(marker, props, prevProps) {\n  if (props.position !== prevProps.position) {\n    marker.setLatLng(props.position);\n  }\n\n  if (props.icon != null && props.icon !== prevProps.icon) {\n    marker.setIcon(props.icon);\n  }\n\n  if (props.zIndexOffset != null && props.zIndexOffset !== prevProps.zIndexOffset) {\n    marker.setZIndexOffset(props.zIndexOffset);\n  }\n\n  if (props.opacity != null && props.opacity !== prevProps.opacity) {\n    marker.setOpacity(props.opacity);\n  }\n\n  if (marker.dragging != null && props.draggable !== prevProps.draggable) {\n    if (props.draggable === true) {\n      marker.dragging.enable();\n    } else {\n      marker.dragging.disable();\n    }\n  }\n});"],"sourceRoot":""}