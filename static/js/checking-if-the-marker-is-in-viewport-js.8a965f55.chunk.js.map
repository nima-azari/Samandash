{"version":3,"sources":["pages/checking-if-the-marker-is-in-viewport.js","util/tileLayer.js","../node_modules/react-leaflet/esm/Popup.js","../node_modules/react-leaflet/esm/Marker.js"],"names":["center","Legend","map","useState","view","setView","markerRef","useRef","useEffect","legend","L","control","position","onAdd","div","DomUtil","create","DomEvent","disableClickPropagation","innerHTML","addTo","checkIfMarkerIsInViewport","contains","getBounds","current","getLatLng","on","remove","off","ref","MapWrapper","setMap","whenCreated","zoom","scrollWheelZoom","tileLayer","url","Popup","createOverlayComponent","props","context","instance","LeafletPopup","overlayContainer","element","setOpen","onClose","onOpen","onPopupOpen","event","popup","update","onPopupClose","popupopen","popupclose","setLatLng","openOn","bindPopup","_context$overlayConta","unbindPopup","removeLayer","Marker","createLayerComponent","ctx","options","LeafletMarker","marker","prevProps","icon","setIcon","zIndexOffset","setZIndexOffset","opacity","setOpacity","dragging","draggable","enable","disable"],"mappings":"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","file":"static/js/checking-if-the-marker-is-in-viewport-js.8a965f55.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport { Marker, MapContainer, TileLayer, Popup } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport tileLayer from \"../util/tileLayer\";\n\nconst center = [52.22977, 21.01178];\n\nconst Legend = ({ map }) => {\n  const [view, setView] = useState(true);\n  const markerRef = useRef(null);\n\n  useEffect(() => {\n    if (!map) return;\n\n    const legend = L.control({ position: \"bottomleft\" });\n\n    legend.onAdd = () => {\n      legend.div = L.DomUtil.create(\"div\", \"description\");\n\n      L.DomEvent.disableClickPropagation(legend.div);\n\n      legend.div.innerHTML = `We check if the marker is in the page view. Move the marker so that it is outside the map. Marker in view: <b style=\"color: ${\n        view ? \"black\" : \"red\"\n      }\">${view}</b>`;\n\n\n      return legend.div;\n    };\n\n    legend.addTo(map);\n\n    const checkIfMarkerIsInViewport = () => {\n      const mapBounds = map.getBounds();\n      const contains = mapBounds.contains(markerRef.current.getLatLng());\n      setView(contains);\n    };\n\n    map.on(\"moveend\", checkIfMarkerIsInViewport);\n\n    // remove the legend\n    return () => {\n      legend.remove();\n      map.off(\"moveend\", checkIfMarkerIsInViewport);\n    };\n  }, [map, view]);\n\n  return (\n    <Marker ref={markerRef} position={center}>\n      <Popup>Center Warsaw</Popup>\n    </Marker>\n  );\n};\n\nconst MapWrapper = () => {\n  const [map, setMap] = useState(null);\n  return (\n    <MapContainer\n      whenCreated={setMap}\n      center={center}\n      zoom={18}\n      scrollWheelZoom={false}\n    >\n      <TileLayer {...tileLayer} />\n\n      <Legend map={map} />\n    </MapContainer>\n  );\n};\n\nexport default MapWrapper;\n","import VectorTileLayer from 'react-leaflet-vector-tile-layer';\n\nconst tileLayer = {\n  //attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n  url: \"http://localhost:8080/data/v3/{z}/{x}/{y}.pbf\"\n}\n\nexport default tileLayer;\n\n\n","import { createOverlayComponent } from '@react-leaflet/core';\nimport { Popup as LeafletPopup } from 'leaflet';\nimport { useEffect } from 'react';\nexport const Popup = createOverlayComponent(function createPopup(props, context) {\n  return {\n    instance: new LeafletPopup(props, context.overlayContainer),\n    context\n  };\n}, function usePopupLifecycle(element, context, props, setOpen) {\n  const {\n    onClose,\n    onOpen,\n    position\n  } = props;\n  useEffect(function addPopup() {\n    const {\n      instance\n    } = element;\n\n    function onPopupOpen(event) {\n      if (event.popup === instance) {\n        instance.update();\n        setOpen(true);\n        onOpen == null ? void 0 : onOpen();\n      }\n    }\n\n    function onPopupClose(event) {\n      if (event.popup === instance) {\n        setOpen(false);\n        onClose == null ? void 0 : onClose();\n      }\n    }\n\n    context.map.on({\n      popupopen: onPopupOpen,\n      popupclose: onPopupClose\n    });\n\n    if (context.overlayContainer == null) {\n      // Attach to a Map\n      if (position != null) {\n        instance.setLatLng(position);\n      }\n\n      instance.openOn(context.map);\n    } else {\n      // Attach to container component\n      context.overlayContainer.bindPopup(instance);\n    }\n\n    return function removePopup() {\n      var _context$overlayConta;\n\n      context.map.off({\n        popupopen: onPopupOpen,\n        popupclose: onPopupClose\n      });\n      (_context$overlayConta = context.overlayContainer) == null ? void 0 : _context$overlayConta.unbindPopup();\n      context.map.removeLayer(instance);\n    };\n  }, [element, context, setOpen, onClose, onOpen, position]);\n});","import { createLayerComponent } from '@react-leaflet/core';\nimport { Marker as LeafletMarker } from 'leaflet';\nexport const Marker = createLayerComponent(function createMarker({\n  position,\n  ...options\n}, ctx) {\n  const instance = new LeafletMarker(position, options);\n  return {\n    instance,\n    context: { ...ctx,\n      overlayContainer: instance\n    }\n  };\n}, function updateMarker(marker, props, prevProps) {\n  if (props.position !== prevProps.position) {\n    marker.setLatLng(props.position);\n  }\n\n  if (props.icon != null && props.icon !== prevProps.icon) {\n    marker.setIcon(props.icon);\n  }\n\n  if (props.zIndexOffset != null && props.zIndexOffset !== prevProps.zIndexOffset) {\n    marker.setZIndexOffset(props.zIndexOffset);\n  }\n\n  if (props.opacity != null && props.opacity !== prevProps.opacity) {\n    marker.setOpacity(props.opacity);\n  }\n\n  if (marker.dragging != null && props.draggable !== prevProps.draggable) {\n    if (props.draggable === true) {\n      marker.dragging.enable();\n    } else {\n      marker.dragging.disable();\n    }\n  }\n});"],"sourceRoot":""}