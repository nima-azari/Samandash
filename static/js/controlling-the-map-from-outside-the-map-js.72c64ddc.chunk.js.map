{"version":3,"sources":["../node_modules/react-leaflet/esm/hooks.js","pages/controlling-the-map-from-outside-the-map.js","util/tileLayer.js","../node_modules/react-leaflet/esm/Popup.js","../node_modules/react-leaflet/esm/Marker.js"],"names":["useMap","useLeafletContext","map","useMapEvent","type","handler","useEffect","on","off","MarkersList","styled","div","MarkerItem","center","points","id","lat","lng","title","ListMarkers","onItemClick","index","onClick","e","preventDefault","MyMarkers","data","selectedIndex","item","PointMarker","content","openPopup","markerRef","useRef","flyToBounds","current","ref","position","MapWrapper","useState","selected","setSelected","zoom","scrollWheelZoom","tileLayer","url","Popup","createOverlayComponent","props","context","instance","LeafletPopup","overlayContainer","element","setOpen","onClose","onOpen","onPopupOpen","event","popup","update","onPopupClose","popupopen","popupclose","setLatLng","openOn","bindPopup","_context$overlayConta","unbindPopup","removeLayer","Marker","createLayerComponent","ctx","options","LeafletMarker","marker","prevProps","icon","setIcon","zIndexOffset","setZIndexOffset","opacity","setOpacity","dragging","draggable","enable","disable"],"mappings":"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","file":"static/js/controlling-the-map-from-outside-the-map-js.72c64ddc.chunk.js","sourcesContent":["import { useLeafletContext } from '@react-leaflet/core';\nimport { useEffect } from 'react';\nexport function useMap() {\n  return useLeafletContext().map;\n}\nexport function useMapEvent(type, handler) {\n  const map = useMap();\n  useEffect(function addMapEventHandler() {\n    // @ts-ignore event type\n    map.on(type, handler);\n    return function removeMapEventHandler() {\n      // @ts-ignore event type\n      map.off(type, handler);\n    };\n  }, [map, type, handler]);\n  return map;\n}\nexport function useMapEvents(handlers) {\n  const map = useMap();\n  useEffect(function addMapEventHandlers() {\n    map.on(handlers);\n    return function removeMapEventHandlers() {\n      map.off(handlers);\n    };\n  }, [map, handlers]);\n  return map;\n}","import { useRef, useEffect, useState } from \"react\";\nimport { MapContainer, useMap, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport styled from \"styled-components\";\nimport tileLayer from \"../util/tileLayer\";\n\nconst MarkersList = styled.div`\n  display: flex;\n  justify-content: space-between;\n  cursor: pointer;\n  max-width: 350px;\n  margin: auto;\n  color: salmon;\n`;\n\nconst MarkerItem = styled.div`\n  margin-top: -10px;\n  padding-bottom: 5px;\n  border-bottom: 1px solid transparent;\n  &:hover {\n    border-bottom: 1px solid salmon;\n  }\n`;\n\nconst center = [52.2295, 21.01];\n\nconst points = [\n  {\n    id: \"1\",\n    lat: 52.228785157729114,\n    lng: 21.006867885589603,\n    title: \"Marker 1\",\n  },\n  {\n    id: \"2\",\n    lat: 52.22923201880194,\n    lng: 21.00897073745728,\n    title: \"Marker 2\",\n  },\n  {\n    id: \"3\",\n    lat: 52.22963944703663,\n    lng: 21.01091265678406,\n    title: \"Marker 3\",\n  },\n  {\n    id: \"4\",\n    lat: 52.229928587386496,\n    lng: 21.01218938827515,\n    title: \"Marker 4\",\n  },\n];\n\nconst ListMarkers = ({ onItemClick }) => {\n  return (\n    <MarkersList>\n      {points.map(({ title }, index) => (\n        <MarkerItem\n          key={index}\n          onClick={(e) => {\n            e.preventDefault();\n            onItemClick(index);\n          }}\n        >\n          {title}\n        </MarkerItem>\n      ))}\n    </MarkersList>\n  );\n};\n\nconst MyMarkers = ({ data, selectedIndex }) => {\n  return data.map((item, index) => (\n    <PointMarker\n      key={index}\n      content={item.title}\n      center={{ lat: item.lat, lng: item.lng }}\n      openPopup={selectedIndex === index}\n    />\n  ));\n};\n\nconst PointMarker = ({ center, content, openPopup }) => {\n  const map = useMap();\n  const markerRef = useRef(null);\n\n  useEffect(() => {\n    if (openPopup) {\n      map.flyToBounds([center]);\n      markerRef.current.openPopup();\n    }\n  }, [map, center, openPopup]);\n\n  return (\n    <Marker ref={markerRef} position={center}>\n      <Popup>{content}</Popup>\n    </Marker>\n  );\n};\n\nconst MapWrapper = () => {\n  const [selected, setSelected] = useState();\n\n  function handleItemClick(index) {\n    setSelected(index);\n  }\n\n  return (\n    <>\n      <MapContainer center={center} zoom={16} scrollWheelZoom={false}>\n        <TileLayer {...tileLayer} />\n\n        <MyMarkers selectedIndex={selected} data={points} />\n      </MapContainer>\n\n      <ListMarkers data={points} onItemClick={handleItemClick} />\n    </>\n  );\n};\n\nexport default MapWrapper;\n","import VectorTileLayer from 'react-leaflet-vector-tile-layer';\n\nconst tileLayer = {\n  //attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n  url: \"http://localhost:8080/data/v3/{z}/{x}/{y}.pbf\"\n}\n\nexport default tileLayer;\n\n\n","import { createOverlayComponent } from '@react-leaflet/core';\nimport { Popup as LeafletPopup } from 'leaflet';\nimport { useEffect } from 'react';\nexport const Popup = createOverlayComponent(function createPopup(props, context) {\n  return {\n    instance: new LeafletPopup(props, context.overlayContainer),\n    context\n  };\n}, function usePopupLifecycle(element, context, props, setOpen) {\n  const {\n    onClose,\n    onOpen,\n    position\n  } = props;\n  useEffect(function addPopup() {\n    const {\n      instance\n    } = element;\n\n    function onPopupOpen(event) {\n      if (event.popup === instance) {\n        instance.update();\n        setOpen(true);\n        onOpen == null ? void 0 : onOpen();\n      }\n    }\n\n    function onPopupClose(event) {\n      if (event.popup === instance) {\n        setOpen(false);\n        onClose == null ? void 0 : onClose();\n      }\n    }\n\n    context.map.on({\n      popupopen: onPopupOpen,\n      popupclose: onPopupClose\n    });\n\n    if (context.overlayContainer == null) {\n      // Attach to a Map\n      if (position != null) {\n        instance.setLatLng(position);\n      }\n\n      instance.openOn(context.map);\n    } else {\n      // Attach to container component\n      context.overlayContainer.bindPopup(instance);\n    }\n\n    return function removePopup() {\n      var _context$overlayConta;\n\n      context.map.off({\n        popupopen: onPopupOpen,\n        popupclose: onPopupClose\n      });\n      (_context$overlayConta = context.overlayContainer) == null ? void 0 : _context$overlayConta.unbindPopup();\n      context.map.removeLayer(instance);\n    };\n  }, [element, context, setOpen, onClose, onOpen, position]);\n});","import { createLayerComponent } from '@react-leaflet/core';\nimport { Marker as LeafletMarker } from 'leaflet';\nexport const Marker = createLayerComponent(function createMarker({\n  position,\n  ...options\n}, ctx) {\n  const instance = new LeafletMarker(position, options);\n  return {\n    instance,\n    context: { ...ctx,\n      overlayContainer: instance\n    }\n  };\n}, function updateMarker(marker, props, prevProps) {\n  if (props.position !== prevProps.position) {\n    marker.setLatLng(props.position);\n  }\n\n  if (props.icon != null && props.icon !== prevProps.icon) {\n    marker.setIcon(props.icon);\n  }\n\n  if (props.zIndexOffset != null && props.zIndexOffset !== prevProps.zIndexOffset) {\n    marker.setZIndexOffset(props.zIndexOffset);\n  }\n\n  if (props.opacity != null && props.opacity !== prevProps.opacity) {\n    marker.setOpacity(props.opacity);\n  }\n\n  if (marker.dragging != null && props.draggable !== prevProps.draggable) {\n    if (props.draggable === true) {\n      marker.dragging.enable();\n    } else {\n      marker.dragging.disable();\n    }\n  }\n});"],"sourceRoot":""}