{"version":3,"sources":["../node_modules/react-leaflet/esm/Polyline.js","pages/polyline.js","util/tileLayer.js","../node_modules/react-leaflet/esm/Popup.js"],"names":["Polyline","createPathComponent","ctx","positions","options","instance","LeafletPolyline","context","overlayContainer","layer","props","prevProps","setLatLngs","center","points","MapWrapper","zoom","scrollWheelZoom","tileLayer","color","opacity","weight","url","Popup","createOverlayComponent","LeafletPopup","element","setOpen","onClose","onOpen","position","useEffect","onPopupOpen","event","popup","update","onPopupClose","map","on","popupopen","popupclose","setLatLng","openOn","bindPopup","_context$overlayConta","off","unbindPopup","removeLayer"],"mappings":"8MAEaA,EAAWC,aAAoB,WAGzCC,GAAK,IAFNC,EAEM,EAFNA,UACGC,EACG,iBACAC,EAAW,IAAIC,WAAgBH,EAAWC,GAChD,MAAO,CACLC,WACAE,QAAS,2BAAKL,GAAP,IACLM,iBAAkBH,QAGrB,SAAwBI,EAAOC,EAAOC,GACnCD,EAAMP,YAAcQ,EAAUR,WAChCM,EAAMG,WAAWF,EAAMP,e,qGCZrBU,EAAS,CAAC,QAAS,UAEnBC,EAAS,CACb,CAAC,iBAAkB,oBACnB,CAAC,iBAAkB,mBACnB,CAAC,iBAAkB,oBACnB,CAAC,kBAAmB,oBACpB,CAAC,kBAAmB,mBACpB,CAAC,kBAAmB,oBACpB,CAAC,iBAAkB,oBACnB,CAAC,mBAAoB,qBAuBRC,UApBI,WACjB,OACE,eAAC,IAAD,CAAcF,OAAQA,EAAQG,KAAM,GAAIC,iBAAiB,EAAzD,UAEE,cAAC,IAAD,eAAeC,MAEf,cAAC,IAAD,CACEC,MAAO,MACPC,QAAS,GACTC,OAAQ,GACRlB,UAAWW,EAJb,SAOE,cAAC,IAAD,6B,gCC7BR,MAOeI,IALG,CAEhBI,IAAK,kD,gCCJP,8DAGaC,EAAQC,aAAuB,SAAqBd,EAAOH,GACtE,MAAO,CACLF,SAAU,IAAIoB,QAAaf,EAAOH,EAAQC,kBAC1CD,cAED,SAA2BmB,EAASnB,EAASG,EAAOiB,GACrD,IACEC,EAGElB,EAHFkB,QACAC,EAEEnB,EAFFmB,OACAC,EACEpB,EADFoB,SAEFC,qBAAU,WACR,IACE1B,EACEqB,EADFrB,SAGF,SAAS2B,EAAYC,GACfA,EAAMC,QAAU7B,IAClBA,EAAS8B,SACTR,GAAQ,GACE,MAAVE,GAA0BA,KAI9B,SAASO,EAAaH,GAChBA,EAAMC,QAAU7B,IAClBsB,GAAQ,GACG,MAAXC,GAA2BA,KAqB/B,OAjBArB,EAAQ8B,IAAIC,GAAG,CACbC,UAAWP,EACXQ,WAAYJ,IAGkB,MAA5B7B,EAAQC,kBAEM,MAAZsB,GACFzB,EAASoC,UAAUX,GAGrBzB,EAASqC,OAAOnC,EAAQ8B,MAGxB9B,EAAQC,iBAAiBmC,UAAUtC,GAG9B,WACL,IAAIuC,EAEJrC,EAAQ8B,IAAIQ,IAAI,CACdN,UAAWP,EACXQ,WAAYJ,IAEwC,OAArDQ,EAAwBrC,EAAQC,mBAAqCoC,EAAsBE,cAC5FvC,EAAQ8B,IAAIU,YAAY1C,MAEzB,CAACqB,EAASnB,EAASoB,EAASC,EAASC,EAAQC","file":"static/js/polyline-js.d5dbc0aa.chunk.js","sourcesContent":["import { createPathComponent } from '@react-leaflet/core';\nimport { Polyline as LeafletPolyline } from 'leaflet';\nexport const Polyline = createPathComponent(function createPolyline({\n  positions,\n  ...options\n}, ctx) {\n  const instance = new LeafletPolyline(positions, options);\n  return {\n    instance,\n    context: { ...ctx,\n      overlayContainer: instance\n    }\n  };\n}, function updatePolyline(layer, props, prevProps) {\n  if (props.positions !== prevProps.positions) {\n    layer.setLatLngs(props.positions);\n  }\n});","import { MapContainer, TileLayer, Popup, Polyline } from 'react-leaflet';\nimport tileLayer from '../util/tileLayer';\n\nconst center = [52.2302, 21.01258];\n\nconst points = [\n  [52.2308124251888, 21.011003851890568],\n  [52.2302604393307, 21.01121842861176],\n  [52.2297445891999, 21.011282801628116],\n  [52.22953759032849, 21.011492013931278],\n  [52.22954416173605, 21.01194798946381],\n  [52.22967558968336, 21.012285947799686],\n  [52.2300008721797, 21.012935042381287],\n  [52.230306438414374, 21.014378070831302],\n];\n\nconst MapWrapper = () => {\n  return (\n    <MapContainer center={center} zoom={18} scrollWheelZoom={false}>\n\n      <TileLayer {...tileLayer} />\n\n      <Polyline\n        color={'red'}\n        opacity={0.7}\n        weight={20}\n        positions={points}\n      >\n\n        <Popup>Polygon</Popup>\n      </Polyline>\n\n    </MapContainer>\n  )\n}\n\nexport default MapWrapper;","import VectorTileLayer from 'react-leaflet-vector-tile-layer';\n\nconst tileLayer = {\n  //attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n  url: \"http://localhost:8080/data/v3/{z}/{x}/{y}.pbf\"\n}\n\nexport default tileLayer;\n\n\n","import { createOverlayComponent } from '@react-leaflet/core';\nimport { Popup as LeafletPopup } from 'leaflet';\nimport { useEffect } from 'react';\nexport const Popup = createOverlayComponent(function createPopup(props, context) {\n  return {\n    instance: new LeafletPopup(props, context.overlayContainer),\n    context\n  };\n}, function usePopupLifecycle(element, context, props, setOpen) {\n  const {\n    onClose,\n    onOpen,\n    position\n  } = props;\n  useEffect(function addPopup() {\n    const {\n      instance\n    } = element;\n\n    function onPopupOpen(event) {\n      if (event.popup === instance) {\n        instance.update();\n        setOpen(true);\n        onOpen == null ? void 0 : onOpen();\n      }\n    }\n\n    function onPopupClose(event) {\n      if (event.popup === instance) {\n        setOpen(false);\n        onClose == null ? void 0 : onClose();\n      }\n    }\n\n    context.map.on({\n      popupopen: onPopupOpen,\n      popupclose: onPopupClose\n    });\n\n    if (context.overlayContainer == null) {\n      // Attach to a Map\n      if (position != null) {\n        instance.setLatLng(position);\n      }\n\n      instance.openOn(context.map);\n    } else {\n      // Attach to container component\n      context.overlayContainer.bindPopup(instance);\n    }\n\n    return function removePopup() {\n      var _context$overlayConta;\n\n      context.map.off({\n        popupopen: onPopupOpen,\n        popupclose: onPopupClose\n      });\n      (_context$overlayConta = context.overlayContainer) == null ? void 0 : _context$overlayConta.unbindPopup();\n      context.map.removeLayer(instance);\n    };\n  }, [element, context, setOpen, onClose, onOpen, position]);\n});"],"sourceRoot":""}